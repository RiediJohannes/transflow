@page "/simulations/{SimulationId}"
@inject Vehicles.VehiclesClient VehicleService
@inject Simulations.SimulationsClient SimulationService


<PageTitle>@_pageTitle</PageTitle>

@* set page title in main layout *@
<SectionContent SectionName=@Constants.SectionNamePageTitle>
    <h1 class="page-title">@_pageTitle</h1>
</SectionContent>

<section class="pt-2">
    @* <h1 class="mt-6">Vehicle Count: @_vehicles.Count</h1> *@

    <MudGrid Class="pa-4">
        <MudItem xs="12" sm="4">
            <MudText Typo="Typo.h6" GutterBottom="true">Select vehicle</MudText>
            <MudPaper Width="100%">
                <MudList Clickable="true" Dense="true" Class="top-row-card" DisablePadding="true">
                    <MudListItem Text="C1" />
                    <MudListItem Text="C2" />
                    <MudListItem Text="C3" />
                </MudList>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="5" Class="top-row">
            <MudText Typo="Typo.h6" GutterBottom="true">Vehicle C1</MudText>
            <MudPaper Width="100%" Elevation="0" Class="top-row-card pa-2">
                <table class="property-table">
                    <tbody>
                        <tr>
                            <td>Length:</td><td>2m</td>
                        </tr>
                        <tr>
                            <td>Length:</td><td>2m</td>
                        </tr>
                        <tr>
                            <td>Length:</td><td>2m</td>
                        </tr>
                        <tr>
                            <td>Length:</td><td>2m</td>
                        </tr>
                    </tbody>
                </table>
            </MudPaper>
        </MudItem>

        <MudDivider Class="my-2"/>

        <MudItem xs="12" sm="6">
            <MudPaper Width="100%" Elevation="1" Class="pt-2 ps-3 pb-3">
                <MudText Typo=Typo.h6 Align=Align.Center GutterBottom="false">Speed</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series1" ChartOptions="@Options"
                          XAxisLabels="@XAxisLabels" Width="100%" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudPaper Width="100%" Elevation="1" Class="pt-2 ps-3 pb-3">
                <MudText Typo=Typo.h6 Align=Align.Center GutterBottom="false">Fuel consumption</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series2" ChartOptions="@Options"
                          XAxisLabels="@XAxisLabels" Width="100%" />
            </MudPaper>
        </MudItem>
    </MudGrid>
   
</section>



@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();

    public List<ChartSeries> Series1 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Fossil", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
    };
    public List<ChartSeries> Series2 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Renewable", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };


    [Parameter]
    public string? SimulationId { get; set; }


    private List<VehicleKey> _vehicles = [];
    private string _pageTitle = "Loading simulation...";

    protected async override Task OnParametersSetAsync()
    {
        Options.DisableLegend = true;

        VehicleList vehicleResult = await VehicleService.GetVehiclesAsync(new SimulationId() { Id = SimulationId });
        _vehicles = vehicleResult.Vehicles.ToList();

        _pageTitle = $"Simulation - {SimulationId}";

        // if we received an empty list of vehicles, check if the requested simulation even exists
        if (_vehicles.Count == 0)
        {
            SimulationResponse simulationsResult = await SimulationService.GetSimulationsAsync(new Empty());

            if (!simulationsResult.SimulationsIds.Any(sim => sim.Id == SimulationId ))
            {
                _pageTitle = "Simulation not found";
            }
        }

        await base.OnParametersSetAsync();
    }
}
