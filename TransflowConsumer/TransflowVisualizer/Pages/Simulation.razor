@page "/simulations/{SimulationId}"
@inject Vehicles.VehiclesClient VehicleService
@inject Simulations.SimulationsClient SimulationService


<PageTitle>@_pageTitle</PageTitle>

@* set page title in main layout *@
<SectionContent SectionName=@Constants.SectionNamePageTitle>
    <h1 class="page-title">@_pageTitle</h1>
</SectionContent>


<section class="pt-2">
    @* <h1 class="mt-6">Vehicle Count: @_vehicles.Count</h1> *@

    <MudGrid Class="pa-4">
        <MudItem xs="12" sm="4">
            <MudText Typo="Typo.h6" GutterBottom="true">Select vehicle</MudText>
            <MudPaper Width="100%">
                <MudList Clickable="true" Dense="true" Class="top-row-card" DisablePadding="true"
                        @bind-SelectedItem=@SelectedItem @bind-SelectedItem:after=@OnVehicleSelectionChanged >
                    @foreach (var vehicleKey in _vehicleKeys)
                    {
                        <MudListItem Text=@vehicleKey.Id Value=@vehicleKey />
                    }
                </MudList>
            </MudPaper>
        </MudItem>

        @if (SelectedVehicle is not null)
        {
            <MudItem xs="12" sm="5" Class="top-row">
                <MudText Typo="Typo.h6" GutterBottom="true">Vehicle @SelectedVehicle.Id</MudText>
                <MudPaper Width="100%" Elevation="0" Class="top-row-card pa-2">
                    <VehicleStatsTable VehicleTypeInfo=@_vehicleTypeInfo />
                </MudPaper>
            </MudItem>

            <MudDivider Class="my-2" />

            <MudItem xs="12" sm="6">
                <SingleLineChartCard ChartName="Speed" ChartOptions=@_chartOptions
                                     Data=@Series2.First().Data XSeries=@XAxisLabels />
            </MudItem>

            <MudItem xs="12" sm="6">
                <SingleLineChartCard ChartName="Fuel Consumption" ChartOptions=@_chartOptions
                                     Data=@Series1.First().Data XSeries=@XAxisLabels />
            </MudItem>
        }
    </MudGrid>
</section>



@code {
    public ChartOptions _chartOptions = new ChartOptions();

    public List<ChartSeries> Series1 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Fossil", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
    };
    public List<ChartSeries> Series2 = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Renewable", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "0", "1", "2", "3", "4", "5", "6", "7", "8" };


    [Parameter]
    public string? SimulationId { get; set; }


    private string _pageTitle = "Loading simulation...";
    private List<VehicleKey> _vehicleKeys = [];
    private VehicleTypeData? _vehicleTypeInfo;
    private List<VehicleData> _vehicleTimeSeries = [];

    private SimulationId CurrentSimulation { get; set; } = new SimulationId() { Id = string.Empty };
    private VehicleKey? SelectedVehicle { get; set; }
    private MudListItem? SelectedItem { get; set; }
    private EventCallback<MudListItem>? SelectedItemChanged { get; set; }


    protected override void OnInitialized()
    {
        _chartOptions.DisableLegend = true;
        base.OnInitialized();
    }

    protected async override Task OnParametersSetAsync()
    {
        CurrentSimulation = new SimulationId() { Id = SimulationId };

        VehicleList vehicleResult = await VehicleService.GetVehiclesAsync(CurrentSimulation);
        _vehicleKeys = vehicleResult.Vehicles.ToList();

        _pageTitle = $"Simulation - {SimulationId}";

        // if we received an empty list of vehicles, check if the requested simulation even exists
        if (_vehicleKeys.Count == 0)
        {
            SimulationResponse simulationsResult = await SimulationService.GetSimulationsAsync(new Empty());

            if (!simulationsResult.SimulationsIds.Any(sim => sim.Id == SimulationId ))
            {
                _pageTitle = "Simulation not found";
            }
        }

        await base.OnParametersSetAsync();
    }

    private async Task OnVehicleSelectionChanged()
    {
        SelectedVehicle = SelectedItem?.Value as VehicleKey;

        if (SelectedVehicle is not null)
        {
            var vehTypeKey = new SingleEntity() { EntityId = SelectedVehicle.VehicleTypeId, SimulationId = CurrentSimulation };
            var typeDataReply = await VehicleService.GetVehicleTypeDataAsync(vehTypeKey);
            _vehicleTypeInfo = typeDataReply.Data;
        }

        await Task.CompletedTask;
    }
}
