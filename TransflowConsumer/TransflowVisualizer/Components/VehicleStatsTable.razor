
@if (VehicleTypeInfo is not null)
{
    <table class="property-table">
        <tbody>
            <tr>
                <td>Length:</td>
                <td>@WithUnit(VehicleTypeInfo.Length, "m")</td>
            </tr>
            <tr>
                <td>Width:</td>
                <td>@WithUnit(VehicleTypeInfo.Width, "m")</td>
            </tr>
            <tr>
                <td>Height:</td>
                <td>@WithUnit(VehicleTypeInfo.Height, "m")</td>
            </tr>
            <tr>
                <td>Max speed:</td>
                <td>@MapOrDefault(VehicleTypeInfo.MaxSpeed, s => $"{Math.Round(s * 3.6, 2)} km/h")</td>
            </tr>
            <tr>
                <td>Max acceleration:</td>
                <td>@WithUnit(VehicleTypeInfo.MaxAcceleration, "m/s²")</td>
            </tr>
        </tbody>
    </table>
}
else
{
    <MudText Align="Align.Center" Typo="Typo.body2">
        No model info available for this vehicle
    </MudText>
}


@code {
    [Parameter, EditorRequired]
    public VehicleTypeData? VehicleTypeInfo { get; set; }

    private string MapOrDefault<T>(T? nullableValue, Func<T, string> mappingFunction, string defaultValue = "n.a.")
        where T : struct
    {
        return nullableValue is null
            ? defaultValue
            : mappingFunction.Invoke(nullableValue.Value);
    } 

    private string WithUnit<T>(T nullableValue, string unit, string defaultValue = "n.a.")
    {
        return nullableValue is null
            ? defaultValue
            : $"{nullableValue} {unit}";
    }
}
