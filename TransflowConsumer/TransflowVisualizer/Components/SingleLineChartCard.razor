<MudPaper Width="100%" Elevation="1" Class="pt-2 ps-3 pb-3">
    <MudText Typo=Typo.h6 Align=Align.Center GutterBottom="false">@ChartName</MudText>

    <MudChart ChartType="ChartType.Line" ChartSeries="@_ySeries" ChartOptions="@ChartOptions"
              XAxisLabels="@_xSeries" Width="100%" />
</MudPaper>


@code {
    [Parameter, EditorRequired]
    public string ChartName { get; set; } = "title";
    [Parameter, EditorRequired]
    public IEnumerable<double> YSeries { get; set; } = [];
    [Parameter]
    public IEnumerable<string> XSeries { get; set; } = [];
    [Parameter]
    public ChartOptions ChartOptions { get; set; } = new ChartOptions();


    private const int MIN_SERIES_LENGTH = 4;
    private string[] _xSeries = [];
    private List<ChartSeries> _ySeries = [];

    protected async override Task OnParametersSetAsync()
    {
        if (XSeries.HasItems() && YSeries.HasItems())
        {
            _xSeries = EnsureMinimumLength(XSeries, MIN_SERIES_LENGTH, "-").ToArray();

            var data = new ChartSeries() { Name = "Series", Data = EnsureMinimumLength(YSeries, MIN_SERIES_LENGTH, 0).ToArray() };
            _ySeries.Clear();
            _ySeries.Add(data);
        }

        await base.OnParametersSetAsync();
    }

    // the graph library unfortunately requires data series of at least length four in order to perform interpolation
    private IEnumerable<T> EnsureMinimumLength<T>(IEnumerable<T> collection, int minLength, T fillerItem)
    {
        int count = 0;

        // first, yield the collection items
        foreach (var item in collection)
        {
            yield return item;
            count++;
        }

        // if we run out of items, return filler items until we reacth the minimum length
        while (count < minLength)
        {
            yield return fillerItem;
            count++;
        }
    }
}
