##############################################################################
#                       General Telegraf Configuration                       #
##############################################################################

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all inputs
  interval = "1s"
  # Rounds collection interval to 'interval'
  # i.e., if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Telegraf will send metrics to outputs in batches of at most
  # metric_batch_size metrics.
  # This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  # Maximum number of unwritten metrics per output.  Increasing this value
  # allows for longer periods of output downtime without dropping metrics at the
  # cost of higher maximum memory usage.
  metric_buffer_limit = 10000000

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "10ms"

  # Default flushing interval for all outputs. Maximum flush_interval will be
  # flush_interval + flush_jitter
  flush_interval = "2500ms"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "10ms"

  # Override default hostname, if empty use os.Hostname()
  hostname = "$TELEGRAF_HOST"
  # If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false



##############################################################################
#                           Input: MQTT Consumer                             #
##############################################################################

# Read data from one or more MQTT topic(s)
[[inputs.mqtt_consumer]]
  # Broker URLs for the MQTT server or cluster.  To connect to multiple
  # clusters or standalone servers, use a separate plugin instance.
  #   examples: servers = ["tcp://localhost:1883"]
  #             servers = ["ssl://localhost:1883"]
  #             servers = ["ws://localhost:1883"]
  servers = ["$MQTT_BROKER_URL"]

  # Topics that will be subscribed to.
  #   examples:  "telegraf/host01/cpu",
  #              "telegraf/+/mem",
  #              "sensors/#"
  topics = [
    "$MQTT_METRICS_TOPIC",
    "test/#"
  ]

  # The message topic will be stored in a tag specified by this value.  If set
  # to the empty string no topic tag will be created.
  topic_tag = ""

  # QoS policy for messages
  #   0 = at most once
  #   1 = at least once
  #   2 = exactly once
  #
  # When using a QoS of 1 or 2, you should enable persistent_session to allow
  # resuming unacknowledged messages.
  qos = 1

  # Connection timeout for initial connection in seconds
  connection_timeout = "120s"

  ## Maximum messages to read from the broker that have not been written by an
  ## output.  For best throughput set based on the number of metrics within
  ## each message and the size of the output's metric_batch_size.
  ##
  ## For example, if each message from the queue contains 10 metrics and the
  ## output metric_batch_size is 1000, setting this to 100 will ensure that a
  ## full batch is collected and the write is triggered immediately without
  ## waiting until the next flush_interval.
  # max_undelivered_messages = 1000

  ## Persistent session disables clearing of the client session on connection.
  ## In order for this option to work you must also set client_id to identify
  ## the client.  To receive messages that arrived while the client is offline,
  ## also set the qos option to 1 or 2 and don't forget to also set the QoS when
  ## publishing.
  persistent_session = true

  # If unset, a random client ID will be generated.
  client_id = "$MQTT_TELEGRAF_ID"

  # Username and password to connect MQTT server.
  username = "$MQTT_TELEGRAF_USERNAME"
  password = "$MQTT_TELEGRAF_PASSWORD"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  # Data format to consume.
  # Each data format has its own unique set of configuration options, read
  # more about them here:
  # https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json_v2"

  # Enable extracting tag values from MQTT topics
  # _ denotes an ignored entry in the topic path
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "sim/+/metrics/+/+"
    measurement = "_/_/_/measurement/_"
    tags = "_/simulation/_/_/_"
  #   fields = ""
  # # Value supported is int, float, unit
  #   [[inputs.mqtt_consumer.topic.types]]
  #      key = type

  [[inputs.mqtt_consumer.json_v2]]
    # [[inputs.mqtt_consumer.json_v2.field]]
    #   path = "vehicles.0.id"
    #   type = "string"

  [[inputs.mqtt_consumer.json_v2.object]]
    path = "@this.#.id"



##############################################################################
#                             Output: InfluxDB                               #
##############################################################################

## Output the data to an InfluxDB instance
# [[outputs.influxdb_v2]]
#   # The URLs of the InfluxDB cluster nodes.
#   #
#   # Multiple URLs can be specified for a single cluster, only ONE of the
#   # urls will be written to each interval.
#   #   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
#   urls = ["$INFLUX_URL"]

#   # Token for authentication.
#   token = "$INFLUX_TOKEN"

#   # Organization is the name of the organization you wish to write to; must exist.
#   organization = "$INFLUX_ORGANIZATION"

#   # Destination bucket to write into (if not specified otherwise by bucket_tag).
#   bucket = "$INFLUX_BUCKET"

#   ## The value of this tag will be used to determine the bucket.  If this
#   ## tag is not set the 'bucket' option is used as the default.
#   # bucket_tag = ""

#   ## If true, the bucket tag will not be added to the metric.
#   # exclude_bucket_tag = false

#   ## Timeout for HTTP messages.
#   # timeout = "5s"

#   ## Additional HTTP headers
#   # http_headers = {"X-Special-Header" = "Special-Value"}

#   ## HTTP Proxy override, if unset values the standard proxy environment
#   ## variables are consulted to determine which proxy, if any, should be used.
#   # http_proxy = "http://corporate.proxy:3128"

#   ## HTTP User-Agent
#   # user_agent = "telegraf"

#   ## Content-Encoding for write request body, can be set to "gzip" to
#   ## compress body or "identity" to apply no encoding.
#   # content_encoding = "gzip"

#   ## Enable or disable uint support for writing uints influxdb 2.0.
#   # influx_uint_support = false

#   ## Optional TLS Config for use on HTTP connections.
#   # tls_ca = "/etc/telegraf/ca.pem"
#   # tls_cert = "/etc/telegraf/cert.pem"
#   # tls_key = "/etc/telegraf/key.pem"
#   ## Use TLS but skip chain & host verification
#   # insecure_skip_verify = false



##############################################################################
#                              Output: File                                  #
##############################################################################

# Send telegraf metrics to a file or standard output for debug purposes
[[outputs.file]]
  ## Files to write to; "stdout" is a specially handled file.
  files = ["/etc/telegraf/test/metrics.out"]
  # files = ["stdout"]

  ## Use batch serialization format instead of line based delimiting.  The
  ## batch format allows for the production of non line based output formats and
  ## may more efficiently encode and write metrics.
  # use_batch_format = false

  ## The file will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.
  rotation_interval = "10m"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  rotation_max_size = "100MB"

  # Maximum number of rotated archives to keep, any older logs are deleted.
  # If set to -1, no archives are removed.
  rotation_max_archives = 3

  ## Data format to output.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "json"

  ## Compress output data with the specifed algorithm.
  ## If empty, compression will be disabled and files will be plain text.
  ## Supported algorithms are "zstd", "gzip" and "zlib".
  # compression_algorithm = ""

  ## Compression level for the algorithm above.
  ## Please note that different algorithms support different levels:
  ##   zstd  -- supports levels 1, 3, 7 and 11.
  ##   gzip -- supports levels 0, 1 and 9.
  ##   zlib -- supports levels 0, 1, and 9.
  ## By default the default compression level for each algorithm is used.
  # compression_level = -1